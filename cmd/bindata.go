// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../README.md

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataREADMEmd = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x7b\x6d\x6f\x1b\x49\x72\xff\xfb\xf9\x14\x65\x19\x07\x89\x3c\x6a\x44" +
		"\x52\xb2\x2c\x09\x7f\xac\xe1\xbd\xdd\xb5\xf5\xc7\xfa\xf6\xb0\xf6\xc1\x58\xf8\x1c\x6e\x73\xa6\x86\x6c\xab\xa7\x7b" +
		"\xdc\xdd\x23\x7a\x6e\x7d\xef\x13\x04\x79\x02\x0e\x48\x90\x20\xf0\xab\xbc\x4f\xde\x25\xc8\xbb\x7c\x94\x7c\x81\xf8" +
		"\x23\x04\x55\xdd\x33\x1c\xea\xd1\xf6\xed\x6d\x90\x18\x30\x45\xce\xf4\x74\x75\x3d\x74\xd5\xaf\xaa\x6b\xee\xc2\xab" +
		"\xd7\x2a\x79\x8c\x0d\xf8\x25\x5a\xbc\x93\x24\xdf\x99\x7a\xdb\x22\x54\xd6\xcc\xc5\x5c\x35\x40\x97\x21\x13\xb5\x43" +
		"\x68\xc2\xad\x02\x73\xa8\x2b\x58\x49\xbf\x04\x43\x8f\xc1\x2b\x67\x34\xbc\xae\xd1\x36\xf4\x5c\x86\xce\x19\xeb\x60" +
		"\x8e\x52\x2f\xc0\x1b\x03\x99\x29\x2b\x25\x33\xe1\x31\x07\x6f\x80\xe6\x2a\x8c\x05\xa1\x1b\xbf\xa4\x31\xae\xb6\x95" +
		"\x70\x8e\xbf\xca\xb2\x52\x08\xf4\x5d\x21\x14\x12\x55\x0e\x0e\x15\x66\x5e\x1a\x9d\x26\xc9\x73\x54\x6a\x04\xc2\x83" +
		"\x42\xe1\x3c\xf8\xa5\xf0\xdb\x0e\x56\x4b\xbe\x92\x43\x89\xbc\xe0\x14\x1e\xea\x7c\x7d\xb3\x81\xd3\xed\x73\x84\x95" +
		"\x95\xde\xa3\x86\xe1\xf0\xd5\x6b\x35\x1c\x8e\x40\x5c\xb9\xf2\xc0\x99\xd0\x80\xe7\xa8\xa1\x34\xc4\xbf\x6d\x2a\x2f" +
		"\x33\xd8\x05\x25\x5d\xd5\xc0\x2e\xb8\x46\x7b\xf1\x06\x76\x9e\x88\x66\x8e\xa0\x4d\x58\x4a\x37\x50\x14\x1e\x2d\x08" +
		"\xa5\x1e\xc0\x29\xbc\xae\xa5\x47\x50\xf2\x0c\x41\x7a\x38\x19\xc0\x20\x49\xe2\x1a\x40\xc8\xd2\x91\x4c\xe6\x08\x85" +
		"\x95\xa8\x73\xd5\x8c\x60\x89\xaa\x2a\x6a\x35\x82\x4a\x78\x92\x3a\x18\x4d\xfa\x81\xb9\xc8\xce\x60\xb5\x44\xdd\xa9" +
		"\x42\x64\x98\xc7\xf5\x42\x69\xb4\xf3\xd6\x38\xe9\x1b\x30\x05\x08\xf8\xff\x4f\xbf\xf9\x25\xcc\x95\x99\xa7\xf0\x18" +
		"\x55\xc5\x33\x95\x46\xe5\xb4\x0a\xa9\xbd\x01\x67\x4a\x0c\x1a\xa8\x1d\x32\x41\xe7\xb1\x82\x79\xc3\x7f\xd3\x24\x39" +
		"\x2d\xf8\xa1\x95\xd0\x9e\x16\xe9\x10\x61\x38\x9c\xa3\xce\x96\xa5\xb0\x67\x8e\x64\xe8\x97\xd8\xd0\x52\x84\x87\x17" +
		"\xb4\x46\xd4\x39\x51\xa7\xaf\xdf\x7e\xf9\xf0\x8b\x27\x5f\xa6\x2f\x77\xee\x7e\xde\x3d\x32\x48\x92\x6f\xce\x46\xa0" +
		"\x90\x34\x93\x2d\x31\x3b\xa3\xd5\x98\xda\x83\x36\xab\x11\xcc\x6b\x0f\x85\xb4\xac\x59\xa9\x17\x2e\xfc\x18\xf1\x2a" +
		"\x96\xe2\x1c\x69\x15\x52\x3b\x2f\x94\x02\xe9\x4f\x92\xef\xbf\xff\x3e\x59\x18\x58\xa0\x87\x85\xf4\xcb\x7a\x9e\x66" +
		"\xa6\xdc\xcb\xea\x39\x4e\xa7\xd3\xe9\x1e\x19\x37\x0d\x49\xbe\x39\x4b\xe1\x0b\xa3\x31\x4d\x92\xaf\x7b\xa4\x89\xae" +
		"\x80\x02\x57\x30\x0b\x86\x37\x03\x7c\x23\xe8\x8b\x4b\x61\xc7\x62\x89\xe5\x1c\xed\x03\x78\x16\x2c\x09\xdf\x90\x19" +
		"\x4b\xaf\x1a\x18\x0e\xb5\xf1\xc3\x21\x1b\xd7\x0a\x49\x00\xc1\xee\x3e\xaf\x3d\x31\x24\x64\xee\xa0\xd6\x39\x5a\xe7" +
		"\x85\xce\x49\xc4\x51\x28\xc1\x9e\x68\x43\xe0\x9b\x8e\xd8\x08\x9c\x01\xe7\x45\x13\x74\x59\x22\xbc\xaa\x1d\x2d\x4d" +
		"\x49\xef\x15\xc2\x5c\x7a\x50\x46\x2f\xd0\xde\x19\xd0\x1e\xd8\x56\x8a\x2c\x66\x65\xec\x19\x4d\xcd\x0f\xf9\xa5\x74" +
		"\x50\x49\xcc\x90\x48\x91\x61\xb3\x78\xe8\x4b\xf2\x03\x24\x00\x5b\x99\xa9\xb5\xdf\x3a\x81\xfd\x51\xf7\xcb\x4a\x74" +
		"\x5b\x27\xf0\x22\x01\x00\xf8\x81\x3f\x01\xb6\xb4\x28\x71\xeb\x04\xb6\x7e\x65\x94\xd0\xf9\xd6\xa8\xbd\x5e\x99\xaa" +
		"\x56\x82\x76\x22\xcd\x72\x34\xe6\x7f\xdd\x5d\xac\xad\xa9\x50\xd0\x3d\x6f\x6b\xec\x5d\x9f\x39\xa9\x33\x9e\x71\x3a" +
		"\x1e\x1f\x6c\xf1\x8d\xdf\x8d\xae\xa6\xf9\x6b\x2d\xc9\x4d\x3c\xf5\xc2\xa3\xbb\x8e\xf4\xf4\xfe\xf5\xb4\x0b\xa1\x1c" +
		"\xde\x48\xe2\x11\xda\x52\xe8\xe6\x9a\xc9\x8f\xf6\x3f\x81\xaf\xc9\xf1\xf1\x7e\xe4\x2b\x01\x78\x99\xfc\x8e\xcd\xee" +
		"\x19\x2b\xd5\x7a\x56\x50\x6b\xf4\x64\xab\x64\x08\x9d\xfc\x41\x58\x2b\x1a\x30\x5a\x35\x29\x3f\xf6\x19\x64\xc2\x83" +
		"\x47\xe7\x53\xf6\x4f\x6f\xc9\x49\xc3\xf6\x0e\x2a\x2c\xfb\x7a\x1b\x6c\x27\xa4\xb8\xc0\xdf\x65\x31\x8f\x92\xeb\x97" +
		"\x7f\xb5\x8a\xaf\x56\x70\x12\x25\xf9\xc3\xa5\xf9\x58\xd4\x17\x26\xbc\x4a\x7f\xd7\x68\xef\xd2\xc4\x17\xe4\xf9\x41" +
		"\x0c\x6c\x2a\xf3\x6a\x55\x12\xa1\xe4\x65\xf0\x04\xcf\x97\x46\x8c\x60\xd5\x7d\xde\x81\xe7\x61\x73\xb7\x21\x8d\x74" +
		"\x53\x09\x8b\xda\x2f\xd1\xa1\x7b\x70\x27\x49\xbe\x8d\x8e\x20\xc4\x99\x53\x70\x42\xe6\x30\xc7\xc2\x58\x7c\x00\x5f" +
		"\x73\x44\x08\xf1\x20\x85\x53\x0d\x6e\x69\xac\x1f\xb1\x9f\xc6\x73\xb4\xec\xbb\xc8\x73\xee\x88\x3c\x87\x09\x4c\x07" +
		"\x23\x90\x44\x70\x2e\x9c\xcc\x84\x52\x1c\x7b\xc1\x89\x12\x41\x38\x10\x79\xbe\x33\x19\xc1\x74\x90\xc2\x69\x88\x19" +
		"\x1c\x58\x62\xbc\xa1\xb0\x39\x97\x0b\x58\x4a\xb4\xc2\x66\x4b\x9a\x80\xdc\x92\x45\xe7\xa4\xd1\x6e\x04\x32\xb8\x6c" +
		"\x8b\x3c\x73\xfc\x33\x0b\x7f\x67\x90\x1b\xbd\xed\xdb\x50\xc4\xce\x9b\x63\x09\x64\x42\xaf\x43\xbe\xf3\xa6\x02\x2b" +
		"\x17\x4b\xcf\x4e\x8d\x86\x99\x7a\xb1\xe4\xa0\x13\x1c\x8f\x32\x1c\xac\x4d\xed\xef\x24\x49\x88\xad\xc2\x6a\xcc\x69" +
		"\x08\x05\x69\x5a\xb1\x2c\x60\x85\x1c\x3a\x30\x67\xe3\x66\x36\x83\x73\x0f\x36\xdc\x40\x61\x4d\x19\xf8\x53\xd2\xf9" +
		"\x07\x1f\x65\xfd\x10\xae\x8c\x07\x83\xed\x84\x2c\xe8\xea\x0d\x70\x95\xf5\x5c\x65\xfc\xd7\x98\x7e\xd8\xc7\x21\x64" +
		"\xcc\x2d\x8a\x33\xc8\xcd\x4a\x07\x3b\x58\x8a\xaa\x42\x62\x3a\x78\xfe\xaf\x98\xb3\x15\x85\x28\x73\xc6\xbc\xf6\x17" +
		"\xcb\x48\x26\x05\x5e\xb2\x17\x67\xb4\xeb\x35\xe9\x5a\x12\x45\xa1\x40\xd8\x45\x5d\xa2\xf6\x64\x1b\xe0\x44\xe3\x60" +
		"\x6b\x69\x56\x14\xee\xbc\x15\xda\x15\xc6\x96\x3c\x27\x4d\x80\xda\x6f\x81\xd0\x39\x48\x07\x42\x39\xc3\x58\xa5\xb3" +
		"\x01\x0a\xf6\x16\x69\x21\x8e\xe2\x09\x76\xd1\x9b\xc8\xf6\x74\x10\x67\x6a\xe3\xd2\x05\x77\x94\xc2\xb3\x25\x42\x8e" +
		"\x85\xa8\x95\x87\xa2\xd6\x0c\xc0\x88\xe2\x4c\xe6\x33\xb2\x6e\x99\x2d\x81\x83\x9b\x63\xab\x94\x39\x6a\x2f\x7d\x93" +
		"\x26\xc9\xdd\xbb\x77\xef\x86\x59\x28\x56\xb1\x6d\xf1\x32\x09\xe3\x31\xdb\xc1\xdf\x15\x50\x11\x58\x21\xb3\xa5\xe5" +
		"\xd1\x7a\x46\xf4\x85\x1c\x24\x47\x49\xbf\x14\x1a\x8c\x6e\xd7\xd6\x9c\x7c\x8a\x7d\xec\x04\x6a\x63\x98\x0e\x06\xff" +
		"\x53\x0e\xf3\xa7\xf0\x6b\xcc\x2c\x89\x9a\x40\x41\xf0\x64\x11\x44\x3b\x6f\x09\x4a\x8d\xda\xdf\x52\x7b\x5c\xa0\x75" +
		"\xa3\xa0\x08\x17\x2c\xc0\x38\x1c\xb1\x51\x99\xf9\x2b\xcc\xbc\xeb\x9c\x61\x49\x5e\xe9\x5c\xa8\x1a\x1d\xec\x10\x3e" +
		"\x23\x93\x62\x37\x92\x19\x72\x6f\xfc\x28\xa1\x37\xd2\xdd\x19\x62\xd5\x42\xb7\x80\xa8\x06\xad\x41\x9c\x61\xe3\x2e" +
		"\xb9\x86\x56\xdf\x84\xe7\xd6\x56\xd8\x00\x49\xc1\x3d\x80\x87\xa0\x71\x15\x81\x31\xec\xc2\x8c\xe6\x98\xc1\x2e\x99" +
		"\xe1\x19\x36\x20\x75\x40\x3d\x4e\xfa\x9a\x65\x93\xc2\xfb\x77\x7f\xfb\x8f\x2c\x90\x8f\x33\x12\x9a\x78\x10\x7f\x04" +
		"\x15\x74\xd6\xb2\xe1\x25\x2e\x47\xb7\x4e\x51\xad\x22\x4e\x3d\x58\xf4\xb5\xd5\x9b\xb6\xde\x72\x48\x94\xda\x3d\xb7" +
		"\x90\x94\x61\x64\x46\xb5\xf9\x0d\x7c\x45\x6e\xc2\xb1\x1e\x4e\x75\x2e\x33\x0c\x9b\xeb\x9b\xa8\x13\xba\xfe\x30\x28" +
		"\xcd\xa2\xab\xe8\xa9\x73\x24\xd8\x40\x50\x43\x2a\x55\x3b\x6f\x85\xc7\x11\xbb\xa4\x6d\xd7\x0a\xac\x76\xec\x82\x69" +
		"\x3d\x41\xbb\x37\xef\xa4\x0d\xf9\x8c\xa3\x70\x3a\x71\xb0\x74\x2e\xba\xcc\x4d\x57\x3b\xda\x70\xc7\xad\x60\x76\x77" +
		"\x77\xc9\x12\xe0\x21\x25\x61\xf4\x54\x92\xfc\xd2\xac\xc8\x12\x5a\x64\xbf\x06\xcc\x20\xe0\x9c\x92\x32\x59\x56\xc6" +
		"\x7a\x32\x94\x12\xb3\xa5\xd0\xd2\x95\x61\x94\x6a\x28\x00\xc5\x2c\x2a\x85\x87\x4a\x75\x4e\xca\x81\xa9\x90\xc4\x10" +
		"\xec\x83\x8c\x4a\x7b\x7c\xd3\x79\x3a\x4e\x8b\x02\x66\x0f\x03\x39\x94\x51\x72\xf9\xd4\x94\xb8\x9e\x66\x14\xe2\x64" +
		"\xf0\x4b\x2b\xa9\x14\x64\xb5\x0f\xfe\xbf\x3f\x2b\xe9\xa7\x17\x81\xc9\x7f\x23\x6d\x17\xb2\x90\xe0\x45\x83\xbf\x6d" +
		"\x3d\x3c\xec\xb6\xce\x73\x69\x6a\x95\x77\x83\xd9\x45\x13\xf6\xe8\x9c\xe2\x0a\x41\x23\x92\xe1\x2f\xd0\xbb\x6e\x60" +
		"\x7e\x0d\x5f\x24\x54\x4a\xc4\xc8\x3e\x46\xfd\xe4\x37\x5a\x41\x67\x95\xd1\x12\x65\x30\xb0\xb0\x46\x87\x99\xa1\xcd" +
		"\xaf\xb1\x4d\x36\x43\x6a\xbf\x14\x3a\x1f\xb5\x02\x75\x57\x50\x16\xad\x5b\x89\xf1\x84\xb2\x46\x1e\x64\x6c\x9b\x19" +
		"\x45\x10\xc2\x29\x4d\x66\x31\x08\x9c\x94\x4c\x69\x50\x40\x12\x82\x51\x4d\x17\x66\x76\xa1\x92\x15\x2a\xa9\x91\x33" +
		"\x23\x4a\x3d\x45\xd3\x09\x8e\xa5\x21\xaa\x4a\xc9\x50\x4f\x30\xb5\xed\xe5\xba\x49\xf2\x8c\x7c\x42\x29\x1a\x70\xa6" +
		"\x8e\x54\x62\xf5\x21\x24\x98\xa7\x50\x48\xcd\x59\xf0\x1c\x33\x53\x32\x5b\xbe\x96\xb4\x97\x62\xae\xfe\xba\x96\xd9" +
		"\x19\xef\x2b\x32\xda\xe4\xbb\x88\x90\x08\xc5\x31\x5a\x61\x3f\x21\x5d\x4c\xe8\x9c\x0f\x3b\xac\x5d\x7e\xf0\xa3\x52" +
		"\x53\x7a\xee\x03\xd6\x63\xc0\x10\xf1\x53\xed\x6a\x96\xc7\x1c\xa1\x66\xe6\x39\xa3\x2f\x6b\xbd\xa0\x1f\xb9\xf0\x22" +
		"\x30\x1d\xf7\xb0\x08\x80\x32\xab\x7d\x0a\x31\x1f\xaf\x38\x6d\x65\x9f\xcc\x64\x5a\xb1\xd1\xd6\xec\xec\x87\x91\x84" +
		"\x2c\xbb\x8c\x35\x33\xfa\x1c\xad\x67\x03\xf5\x01\x33\x28\x2c\x5b\x71\xad\x02\x56\x20\x2e\x2d\xae\x2c\x09\x81\x8d" +
		"\xd1\xe2\xb9\x34\xb5\x8b\x35\x92\x50\xa8\x28\xeb\x60\xbd\xd6\xa3\x0d\xbc\xce\xd1\x7b\xb4\x50\x0a\x9f\x05\x00\xed" +
		"\x96\xa2\xc2\xd6\x30\x89\xa5\x9b\x33\x9b\x0d\x8f\xd3\x3a\xe3\x3f\xd0\x0f\xb7\xee\xe6\xeb\x90\x42\xbb\xa5\x59\x65" +
		"\xc2\x61\x1f\xcc\xa3\x6e\xc1\x7c\x8b\x81\x6b\xd7\x8f\x8f\x5d\xe4\x8c\x81\xb2\x1f\x1e\x85\x5b\xef\xd4\x9b\x81\xeb" +
		"\x26\x73\x21\x20\x74\xa8\xe4\x86\x2f\x04\x58\x06\x30\x81\x9d\x40\x12\xb6\xce\xb0\x99\x6c\xc1\x84\xbf\x4c\xb7\x7a" +
		"\x4f\xdc\x36\x80\x67\x22\x89\xf6\x3c\x76\x27\xd7\x90\xfb\x6f\x66\xf3\x2f\x62\x8e\x7b\x31\xc7\x6f\xaf\x5f\xbe\xd3" +
		"\xbf\x77\xd5\x5d\xe8\x83\x96\xf0\xef\x65\xd2\xff\x4b\x9f\x2f\x69\xfc\x46\x72\x1f\x21\x14\x33\x76\x29\xef\x0f\x6c" +
		"\x9e\x5c\xbb\xda\x1f\x3a\x52\xd7\x4c\x70\xd5\x24\x1f\xbd\xfc\xdf\x75\xcb\x6f\xb1\xd8\xfb\x77\xbf\xff\xa7\xf6\x7f" +
		"\x92\x7c\xc1\x58\x29\x37\x0c\x55\x5a\x8f\xc2\x88\xc8\x0a\xbd\xc0\x4d\x88\x1c\x4a\x9d\x20\xc2\x3d\xda\x40\xd1\xad" +
		"\xba\x51\x74\x16\x7e\x89\x69\x9a\xb2\xc1\x2e\x6a\x74\xe4\x77\x24\xc5\x94\x19\x3f\x31\xeb\x9c\xc1\xc7\x6c\xb8\x40" +
		"\x6c\x02\xfb\x57\xec\xba\x0f\xd8\x69\xdf\xf5\x36\x0f\xed\xf7\x19\xdb\xdd\xac\x97\x35\xe8\xe8\xac\xda\x1d\xc3\x55" +
		"\x61\x33\x67\xd7\xa2\x9a\xce\xaf\x31\x22\x14\x9c\x0b\x12\xeb\xb4\x92\xdd\xb5\xc9\x82\xaf\x2b\x85\xae\xdb\xab\x14" +
		"\x4f\x3e\xde\xab\xc4\xfd\x17\xd9\xbc\xb4\x27\x36\x36\xc5\x26\xd8\xef\xc1\x7b\x36\xd4\x38\xe6\xaa\x82\x47\xbf\xc4" +
		"\xd1\x1f\xbb\x09\xea\x7b\x26\xf5\xb2\x95\x25\xe7\x6e\xcd\xc5\x78\xd3\x4a\x94\x32\x28\x0c\x61\x67\xb5\x34\x6a\x1d" +
		"\x88\x03\x92\xf4\x26\x3a\x77\x14\xd9\x92\x24\x28\xc9\x51\x45\xdc\xe1\x52\xd8\xf9\x16\x4b\x49\xe8\xe9\x04\x9e\x73" +
		"\x64\x0e\x26\x15\x64\xc1\xde\xad\x2f\x0d\x72\x71\x1c\xe8\xda\xf8\xe3\x42\xa6\x3b\x48\x92\x27\x14\xf3\xd6\x78\x8b" +
		"\x53\x8e\x58\xab\x90\x2e\x85\x6f\x28\xdb\xef\xc7\xc8\xad\xb8\xce\xdd\xac\xf6\x04\xa0\xd0\x6e\xf5\x02\x7b\x9b\x21" +
		"\x04\x37\xb6\xb6\x27\xde\x11\x64\x54\xb3\x70\x67\x46\xe3\x19\x40\x60\xeb\x86\x47\xb1\xf8\xdd\xf2\x08\x42\x79\xb4" +
		"\x3a\x40\x0c\x86\xda\xc4\x55\xc8\x5e\x6e\xde\x11\x91\x38\xdc\xf0\x8f\xe5\x44\xb6\x74\x73\xb8\xba\x79\x8e\xb5\x80" +
		"\x2f\xcf\xd4\xfa\xeb\x31\x4c\xae\xb4\xcc\x1f\x92\x6e\x11\x27\x57\x9a\xe8\xd5\xd5\xb7\x6e\xbf\x46\x63\xdc\x58\xc3" +
		"\xc9\x95\x01\xe0\xc2\xaf\xbe\x39\xc7\x9a\x48\xc4\xee\x64\x45\x39\xa1\xc6\xae\x76\x36\x1c\x66\xc6\xe2\x70\xd8\xd9" +
		"\x87\x50\xf1\x44\xe2\xd5\x6b\x15\xc1\xa6\xaf\x8b\x82\xf4\x5f\x08\x1b\x90\xf5\xba\xf6\x54\x17\x85\xcc\xc2\xf9\x50" +
		"\x8b\xac\x80\xe2\x76\xd0\x24\x1f\xc9\x70\x66\xd0\x96\xd0\x09\x5c\x50\xa0\xae\x33\x5f\x5b\x52\x72\xf2\xd8\xac\xf0" +
		"\x9c\x90\x49\x38\xba\x22\x4c\xcf\xe5\x84\xce\x5e\x4f\xd8\xde\xe0\x29\x47\x77\x28\x85\x96\x9d\x8b\x79\xff\xee\x2f" +
		"\xff\x3d\x5a\xe3\x2b\x23\x75\x7b\x00\xc2\x75\x3c\xc6\xe2\xde\xc0\x8c\xee\xcc\x36\x92\xbb\x0d\xfc\xaf\x09\x5d\x45" +
		"\xec\x30\x8a\xa3\xb7\x23\x56\x24\xd3\x8d\x67\x37\xca\x18\x2e\xde\x17\xc6\xde\x69\xe7\x64\x59\x84\x40\xc0\x8f\xcb" +
		"\xa2\x59\x9f\x92\x49\x4a\x82\xd0\xbb\x34\x79\x2e\xfd\xd2\xd4\x1e\x1c\x56\xc2\x0a\x6f\xec\x47\xe4\x73\xad\xb9\x12" +
		"\xc1\x5b\xbc\x21\xec\xac\x53\xba\xc1\xe0\x22\x10\xdb\x4f\x8f\xf0\xe7\xe3\xfb\xde\xd6\x78\x05\x26\xdb\x4f\xa7\xf7" +
		"\xf1\xe7\xe3\x23\x2e\x11\x6f\x84\x8d\xa3\x74\xbf\x7b\xae\x2b\xca\x72\xb9\xe2\xa7\xe4\x06\xb6\x46\x70\x09\x5b\x8e" +
		"\x20\x32\x35\x82\x6b\xd8\xa2\x11\x81\xb1\x11\x5c\x66\x6d\x04\x91\xb9\xf8\x7c\xcb\x1e\xdb\x93\xab\xac\xd4\xbe\x48" +
		"\x9e\xb7\x75\xe1\x53\x50\x28\xac\x06\xc1\x45\x0e\x25\xf4\xa2\x16\x0b\x1c\x51\x7a\x82\xa8\x02\xca\x6e\x4f\x8b\x0a" +
		"\xca\x82\xe7\x0a\x5b\xd0\x7a\xc6\xf5\x96\x75\x86\x10\xe6\x5e\x07\x7f\xd8\xa1\xdd\x12\x2b\x88\x0c\x6a\xfd\x20\x49" +
		"\x1e\xea\x66\x25\x1a\x17\x77\x06\x43\x08\x33\x0a\x78\x3d\x94\x97\xa3\xbb\x6e\x6b\xd1\x1c\x7b\xda\x5a\x85\x09\xd5" +
		"\x3e\x61\x73\x50\x72\x6e\x85\x6d\xe0\x45\x51\xfa\xf4\x69\xa0\xfd\x72\x67\xe9\x7d\xe5\x4e\xf6\xf6\x16\x24\xcb\x45" +
		"\x6a\xec\x62\xaf\x3a\x5b\xec\x15\xa5\xdf\x1b\x74\x2b\xfb\x04\xdd\xb6\xcc\x6d\xfd\x8c\x20\x77\xab\xd0\x13\xf8\x59" +
		"\x3a\x2e\xb6\x6e\x8d\xe4\x51\xb5\x1b\x4f\xb6\xde\xed\x0a\x05\x6f\x8e\x6b\xfd\xde\x86\x96\x37\x86\xb4\x31\xbc\xd5" +
		"\xf5\x63\x53\xf5\x0e\xca\x29\x85\x5d\x6c\xe8\xef\xfd\xbb\x7f\xf8\x73\x2e\x96\x9d\x0c\x82\x17\x42\x6b\x8d\x4d\x9e" +
		"\x75\xaa\x8c\x27\x7e\x4b\x54\x15\xda\x7e\x46\x3c\xe3\x91\x33\xd8\x65\xdf\x18\xaa\x6e\x5e\x52\xf6\xda\x3f\x11\xce" +
		"\x71\x5e\x2f\x38\x91\x6c\x28\x2d\xa6\xb4\x4d\xb2\x57\x3c\xa5\x34\x74\xa3\x50\x1c\xb3\x69\x9e\xd6\x51\xd6\x1f\x0b" +
		"\x0c\x92\x2b\x45\x39\x63\x8a\x80\xb6\xc8\x9b\x89\xec\x0c\xbc\x15\x19\xa6\x70\xea\xd7\xe1\xb9\xab\x5e\xb0\x8c\x49" +
		"\x51\xe4\xb0\xfa\x54\x3a\x60\x27\x75\xc8\x85\x23\x16\x48\x93\x3f\x9e\x29\x30\x4f\xb0\x45\xb3\x42\x89\xce\x89\x05" +
		"\x46\x93\x98\x8e\x27\xc7\x7b\x93\xe9\xde\xf4\x10\xc6\xe3\x93\xc9\xfd\x93\xf1\x41\x90\x00\x2c\xd0\x33\x6a\xe8\x2d" +
		"\x3d\x80\x56\x12\x77\x2c\x9b\x41\x66\x6a\x95\x13\x9e\xe7\x53\xbc\xb6\x32\x8f\x79\x6f\x68\xe8\x59\x58\x97\xd3\x39" +
		"\x30\x86\xdb\x2f\x4a\x51\xbd\x68\xeb\x62\x27\xd3\x31\xd1\x8e\x2e\xe9\x84\x1c\x06\x23\xde\x93\xcb\x06\x1b\xbd\xd2" +
		"\x4b\x08\xcf\xc7\x27\xd8\xff\x84\x47\xae\x35\xe1\xd6\x5b\xb5\x8f\x46\xd2\x93\xe3\xe3\xfd\xab\x48\x5f\x61\xe1\xd1" +
		"\xa3\xbd\x7c\x79\x81\xf9\xf6\xf8\x20\x40\xc8\x0e\xd8\x0b\x1f\xa3\x22\xe1\xcc\x37\x30\xfe\x20\x91\xc5\xb1\x7d\x51" +
		"\xfd\x81\x92\xea\x91\xed\x2c\xb4\x35\x9e\xae\x10\xc7\xe4\x02\xed\xc9\x09\x3c\x09\x76\x72\x02\x7d\xab\x49\x16\xc6" +
		"\x9a\xda\x4b\x4d\xe9\xd1\x0b\x5b\x6b\x2d\xf5\xe2\xe5\x49\x62\x6b\x4d\x7b\x6f\x8f\xb7\x5b\xfa\x94\x76\xc7\xce\xf8" +
		"\x4d\x46\x9e\xe0\xfe\x74\xbf\x18\x8f\x60\xfc\x66\x32\x99\x1c\xe0\x98\xbf\x86\x1b\x07\x07\x38\x5e\xa3\xc3\xbd\xda" +
		"\xd9\x3d\x65\x32\xa1\xf6\x7e\x81\x4a\x09\xbb\xb7\x30\x7b\x93\x74\xb2\x9f\x1e\xec\x29\x39\xc7\x37\x98\xed\x39\x9b" +
		"\xed\x6d\x90\xda\xe3\x8d\x98\x2e\xcc\xc9\xf4\x00\x7e\x3e\x7e\x73\x9c\x27\xd7\xf4\x3d\xd0\xff\xf4\x4b\xb2\xec\xf4" +
		"\x11\xfa\x1d\x5a\xce\xe1\xc1\xe1\x51\x6f\x39\x37\xae\x33\xdc\x18\x67\xf7\xb2\xfe\x13\x07\x07\xfc\x2b\x7c\xf4\x58" +
		"\xf9\xb5\x43\xeb\xf6\x5e\x89\xb3\x7a\xbe\xf7\x2b\x6b\x18\x9a\xef\x3d\x32\xbc\xfe\x1b\xd6\xb7\xd7\x41\x32\xe2\xe8" +
		"\xfe\xe4\x1e\xb1\x34\x19\x4f\x6f\xe4\x29\xc6\x9b\xeb\xb9\x9a\x6f\xb0\x72\xc8\xbf\xa6\xdd\xc7\xf5\xdc\x8e\xc7\xf3" +
		"\xc9\xfe\x61\x9f\xdb\xe3\x78\x63\x04\x69\x9a\xfe\xd8\xec\x4e\x8f\x8f\x99\xdd\x43\x71\x23\xbb\x8f\xd0\x7f\x19\xb6" +
		"\x1a\x73\x3b\x9e\xcf\x03\xb7\x93\xe9\xc1\xfd\xe3\x4e\x4f\xc7\xd8\xd3\xd3\x91\x98\xb4\x37\x0e\x0f\xc4\x74\x83\xd7" +
		"\xf6\xe1\x69\x76\xef\x30\x7e\x3d\x9a\x1f\xe6\x6b\xb5\x92\x18\xc4\xf8\xe8\xc7\xe6\x76\x32\x9e\x10\xb7\xe2\xf8\xf0" +
		"\xa3\xb8\xbd\xc0\xd7\x74\xfa\x89\x0c\x87\xbb\xf7\x0a\xfa\xd7\xdd\x15\xc5\x5c\x84\x1b\xc7\x07\x3f\xbe\x31\x13\xbb" +
		"\x07\x87\xb7\xec\xcf\x58\x33\x5f\xdb\xf2\xf1\x5a\xbb\xe3\xec\xe8\x66\x25\x5e\x27\x05\xfe\x95\x1d\x8e\x27\xe1\x79" +
		"\xc4\xfe\xc5\x71\xd4\xf2\xfe\xfe\x78\x92\xfd\xe8\x5a\xde\x0f\x5b\x78\x5a\x7c\x94\x96\x2f\x78\x99\xe9\xfc\x3a\xbf" +
		"\x34\xef\xb4\x7c\xb4\xc9\xf8\x61\xdf\x80\xfb\x5b\x38\x3c\x21\x7e\x74\x46\x27\x47\xc4\xe8\xd1\xe1\xcd\xbe\xea\xb2" +
		"\x7e\x2f\xf8\x2a\x71\x33\x43\xd7\x8b\xa0\xbb\x7d\x14\x47\x6e\x32\xfd\x47\x54\x6c\x29\xa4\x4e\xe9\x63\xe7\x0f\x24" +
		"\xc2\x13\x2d\xcc\xc9\x3e\xfb\xc1\xe9\xfc\xa0\x4b\x96\xe0\x6b\xb3\x90\x59\xf2\x1d\x36\xa3\xd0\xf3\x18\x8f\xc6\xb8" +
		"\x63\xc6\xc5\x26\xd5\x73\xca\x49\x3c\xcc\xf0\xf5\x6c\x04\x33\xe5\x67\x0c\x41\x67\x0b\x3f\x1b\xf1\x11\x57\xdb\x1c" +
		"\x27\x18\xc3\x6e\xe7\xeb\x1a\x03\xbe\xa9\x6e\x3d\x03\xc5\xd7\x01\x3e\x6e\xc5\x3f\x83\xed\x84\x70\xc7\x87\x8e\x9f" +
		"\xd2\x03\xa1\x13\xed\xba\x27\x94\x87\x2d\xb1\x05\x5b\xf3\x5b\xe7\xa6\x91\xf3\x2d\x1a\x7d\xeb\xa4\x0b\x0f\xf7\xe0" +
		"\xa0\x9d\x90\x18\x3c\xd5\x5c\x3e\x69\xf3\x83\x95\xd1\x39\xc6\xca\x04\xbe\x9e\x41\x6e\x90\xb2\x8e\x17\x16\x0b\x85" +
		"\x99\x4f\xbf\x40\xac\xbe\x7c\x5d\x0b\x75\x6d\x3e\x17\x47\xee\xdd\xed\x86\x0e\x28\x79\x98\x9b\x7e\x1d\x2e\xed\x74" +
		"\xc4\x59\x02\x2b\x4a\xe8\x9c\x34\x65\x2c\x7d\x6a\x43\x7a\xf2\x26\x36\x11\x70\xb2\xb2\x6e\x6f\x25\x90\xa3\x42\xb5" +
		"\x9b\xd2\x9c\xca\xca\x52\xa8\x36\xc5\x28\xc3\x49\xdd\x8e\x33\x25\xf1\x53\xab\x9c\x4f\x07\x87\xc3\xa2\xd6\xb9\x20" +
		"\xf2\x42\x0d\x87\x03\xd6\xb7\xc2\x32\xa4\x30\xa5\x68\x00\x35\xa3\x72\xbc\xa5\xc0\x40\x64\x18\x63\x76\x1f\xb7\x29" +
		"\x68\xf3\x09\xd6\xd0\xad\x9a\xda\x7c\x46\xd7\x4a\xdd\xfa\x08\xa5\x7d\x97\xa8\xdc\xb8\x30\x63\x3f\x64\x1d\xb7\xcd" +
		"\xc2\xdd\xcd\x41\x0c\x37\xcf\x45\x03\x3f\x68\x5d\x34\x30\xb2\x7c\xeb\xb8\x58\xd5\x09\xf3\x76\x4b\x20\x05\xb2\x45" +
		"\x85\x5d\x4f\x89\xb1\xb0\x18\xac\x50\x89\xdf\x76\x35\xe5\x67\xb6\xf6\x4b\xa9\xd1\xb9\x78\xd0\x39\xe7\x23\x3d\xa8" +
		"\x5d\xeb\x54\xbc\xa9\x64\xc6\x55\x8e\x6e\x68\xca\x3d\x81\x61\x6f\x04\x22\x99\xd1\x4e\xe6\x68\xe3\x09\xe8\x16\x97" +
		"\x77\x1e\x40\xe8\x46\xe7\xac\x36\x1c\x1c\xc7\xf6\x75\x91\x79\x3e\xe3\x4d\x93\x64\xc8\x8c\xc2\x70\x28\x1d\x84\x96" +
		"\x61\xa6\xd3\xa4\xc9\x30\xf0\x74\xf5\xad\xae\xea\x87\xed\x90\xde\xed\xc0\x9a\x2c\x3c\x26\x09\x7d\x86\x83\x6e\x07" +
		"\x67\x52\xe7\x02\x0a\x55\x17\x45\x13\x8e\xba\x6b\x5d\x18\xeb\x6b\x2d\x3c\xaa\x86\x3b\xad\x35\x37\xf8\x75\x6d\x5b" +
		"\xa7\x05\x3c\xa3\x1d\xf7\xa5\x72\x78\x73\x81\x9c\x09\xb1\xe9\x05\xee\x61\x2b\x14\xc0\x06\xdb\x49\xb8\xd0\xb6\xbf" +
		"\x6c\x3b\xd6\x00\x78\x63\xf8\x64\x47\x7a\x58\xa1\x45\xbd\xcd\x0d\x87\xd2\xc5\x3d\xcb\x59\x77\xd8\x89\xea\x83\x69" +
		"\xb6\x99\xfd\xc9\xce\xd6\xe0\x02\xe1\xaf\x98\x6d\x36\x07\x36\x00\xf8\x5a\x9e\x21\x08\x9a\x99\xf4\x69\x58\x9d\x5d" +
		"\xf7\x63\x26\xbc\x7b\x70\xf9\x32\x11\x7c\x00\xef\xdf\xfd\xf5\x9f\x46\x21\x17\x52\x79\xb4\xf0\xfe\xdd\x5f\xfc\x33" +
		"\xb7\x87\x84\x8a\x4b\x57\xd3\xe0\x9e\x86\x4a\xd8\x75\x1b\x9d\x38\xc3\x51\xdb\x43\x1a\x53\x4c\x6d\xe0\x37\xff\x4f" +
		"\x6a\x87\xd6\x43\x2e\x1d\x11\xca\xa1\xb0\xb5\x0c\xfd\x95\xbf\xf9\x2c\x8d\x4d\x94\xe4\x26\xb5\x89\x25\x6d\x24\x65" +
		"\xf1\x7c\x2e\x36\x60\xf2\x91\xc9\xba\x89\xb8\x8d\x8c\xec\x3a\x51\x99\x73\xec\x95\x1d\x3e\xa2\xce\x16\x59\xa4\xd8" +
		"\x71\xa1\x62\x7a\x2f\xd4\xb6\xc6\x97\x3b\xe7\xfe\x57\xb7\x00\x3f\x54\xce\x8c\x60\x8e\xe1\xad\x96\x19\xed\xcf\x19" +
		"\x84\x3d\x18\xb7\x58\xe8\x6a\x98\xa1\xc2\x72\xdd\x37\x33\x63\x5e\x67\x20\xd9\xa4\xbb\x60\xe2\xa0\x94\xe1\xdd\x95" +
		"\x22\x34\x6f\x85\x82\x86\xcc\xd0\x8d\x36\xfa\x0a\x66\x41\xd0\xb3\xb6\xe7\xcd\x4a\x7e\x53\x62\x65\x8d\x5e\xec\xba" +
		"\x6c\x89\xa5\x60\xd5\x7f\x82\xea\xd6\x82\xfb\xbf\xdd\xe4\x48\x3b\xb2\x92\x15\x26\x33\xfa\x64\xa5\x09\x28\x84\xb4" +
		"\xaa\x21\x11\x2b\x74\x6e\x5d\x32\x6d\x15\xdc\x3f\x2f\x66\x45\x08\x02\x92\x4b\x9e\x28\xbe\xb0\x51\xb0\x2f\x64\x40" +
		"\x61\x51\xb8\x7e\xd5\x92\x8f\x28\xcf\x11\xb2\xaa\x86\xac\xc9\xd4\x6d\x5b\x8b\x97\x77\xc3\x01\x60\x5f\x81\x37\x1e" +
		"\x15\xb6\xc7\xf2\xd3\x9b\x4f\x14\x3f\xa1\x5d\x26\x4a\x53\x3a\x40\x82\x6f\xe0\xcd\x87\x5a\xdc\x60\xbb\xbb\xba\x5e" +
		"\x5d\xef\xda\x85\xa5\x7c\xe8\x4a\x58\xaf\x16\x19\x0a\x26\x5f\x49\x4d\xa1\x33\x38\x51\x3e\x59\x0c\x0d\xa6\xa2\xe4" +
		"\xb6\x22\xa5\x78\x9f\xce\x11\x5c\x65\xce\x50\xf3\x3b\x3c\xca\xd4\x79\x0a\xef\xdf\xfd\xcd\xbf\xc1\x2f\x11\xf9\x75" +
		"\x9b\xa5\x2c\xa1\x44\xa1\x83\xb3\x46\xc9\xdd\x6c\xdd\xa6\xc5\x9c\xac\xa0\x5e\x80\xec\xbd\x0e\xc6\x65\xf5\xd0\xa7" +
		"\x65\x79\x27\x92\x0f\x96\x0e\x1c\xda\xd0\xa8\x40\xf0\x22\x5b\x62\x9e\x26\xc9\x63\x7e\x07\x67\xd9\xbe\x56\x95\x71" +
		"\xe7\x53\x2c\xa5\x33\x4e\x15\x5a\x66\x6e\xc4\xc1\xbf\x29\x62\xe3\x46\xaf\xb6\x3c\x02\x85\xe2\x3c\x74\x1e\xaa\x06" +
		"\xce\x0d\xbf\x51\xb0\x94\x3a\xff\x84\x4e\x29\x8b\xd9\x70\x38\x84\x10\x2e\xfb\xc7\x5c\xb0\x23\xf3\x75\x39\x9c\xe4" +
		"\x76\xd5\x81\xde\x4f\xe5\x2a\x48\x16\x3f\xb5\xcb\xf8\x85\x29\xe7\x52\x23\x9b\x03\x07\xe3\xce\x0b\x77\xc7\xc9\xa4" +
		"\x18\x96\x3f\x9f\xbe\xce\x29\x0c\x6b\xbc\xc3\x6d\x8c\x95\x15\x99\x97\x59\xf0\x21\x5d\xbf\x4a\xd7\xaf\xea\x2a\x54" +
		"\x8a\x0d\x90\x60\x0d\xad\x70\x14\xda\x26\x57\x92\x8f\xdc\x62\x9f\x34\x65\xa2\x01\x8e\xc5\xa6\xcc\xe0\x5f\xee\x24" +
		"\xc9\x5d\x78\x5a\x97\xa5\xb0\x4d\x77\x6e\x04\xa8\x5f\x99\x06\xf3\x80\x94\x86\x43\xa9\x33\x8b\xb9\x9c\x2b\x1c\x0e" +
		"\xe1\x95\xa9\xad\xc6\xe6\x4e\x92\x3c\x31\x16\x0d\x1f\x72\x9f\xc2\x92\x1e\x65\x0c\x1a\x5e\x43\xec\xde\xc1\x93\xfe" +
		"\x0e\x3c\x36\x36\x47\x6e\x38\xee\x3a\x24\x1d\x38\xcf\xe7\xcc\x2b\x21\x7d\x68\x35\x0e\x73\xb4\xef\x24\x46\x39\xf0" +
		"\xc9\x39\xef\x85\x15\x8a\xca\x68\x9a\x24\x5b\x9a\xf6\x74\x3e\x47\xa1\x7a\x2f\x9f\x61\x19\xde\xe6\xd0\x66\x05\x46" +
		"\xdf\x81\xff\xfc\xfb\xdf\xff\xd7\xbf\xfe\x55\x92\x9c\x3a\x57\x53\x24\xcc\x4c\x19\xfb\x98\x62\x69\xdd\x8d\xc0\xe2" +
		"\xb9\xc4\x95\xa3\x58\xdc\xbe\x1f\x18\x42\x26\x6f\x76\x5a\xfe\x2e\xa7\xf2\x84\xec\xf9\xd0\x5f\x54\x95\xc5\x4c\x0a" +
		"\x8f\xf9\x1d\x78\xff\xee\xef\xfe\x8c\x44\xb8\x7e\xb9\x30\x42\xfc\x7e\x54\x70\x8d\xf6\x4b\xf4\x32\x5b\xd3\x80\x1d" +
		"\x16\xd6\xfa\x4d\x88\xf0\xe6\x26\x91\xf4\x06\xca\x06\x4a\xa9\xf3\x01\x83\xad\xd3\xa8\xc1\x90\x5f\x06\xe9\x48\x07" +
		"\x85\x70\x9e\x3b\xdf\x29\xaa\xbc\x4e\xe1\x4b\x57\xd1\xaa\x14\xd1\x23\x8b\x86\x57\xaf\x61\xc9\x5d\xf3\xec\x38\x7a" +
		"\x47\xb9\x22\x3f\x17\x3a\xeb\xf5\x8a\x0a\x25\x7d\x38\xa0\x7b\x1e\xde\x2d\x62\xe1\x13\xbd\x16\xf3\xc9\x78\x0e\xdb" +
		"\xa3\x9f\x63\x21\xc9\x8f\xaa\x86\x55\xee\x94\x59\xb1\x1e\xdb\x48\x57\x58\xa4\x7b\x59\x1d\x7d\xd9\x8a\xa7\xb3\xfc" +
		"\x12\xcf\x42\x2e\xc4\xbc\xf1\xc1\x26\x18\x69\xc6\x66\xd7\x11\x88\xae\xbf\xb7\x30\x4a\x99\x15\x69\x77\xad\x19\xb6" +
		"\x67\xe1\x60\xba\xbb\x1f\xcf\x1d\x2f\x88\x81\xa4\x8f\xe1\x81\xb9\x5c\x04\xb7\x55\xc8\xd8\xa4\x24\xa4\x76\x30\xfd" +
		"\x93\xe9\x18\x2c\x56\xe8\x63\x87\x73\x04\xcd\x3c\x74\x85\x04\x81\xe7\x88\x3a\x9e\x29\xc5\xb5\xb4\xef\x48\xc6\x7e" +
		"\x91\x00\xcd\x7c\x4b\xa9\xc4\x5c\xd6\xe5\x95\xc4\xc6\x69\x92\xbc\x85\x5f\x98\xb2\xa4\x27\xde\xc2\x13\x14\x1a\x5e" +
		"\xb8\x97\xf4\x55\x76\xdf\xc4\x9b\xf8\xed\x5b\x24\x3f\x72\x8e\xf0\x36\x79\x7b\xb2\xbb\xbb\xfb\x76\x77\x77\xf7\xe4" +
		"\xe2\x47\xf2\x16\xbe\x27\xc7\xbc\xc9\xe5\x6f\x3e\xb0\x8f\x15\x3e\xfb\x8c\xbc\x05\x3f\xf4\x3d\xbc\x85\x7b\xe9\xf1" +
		"\x74\x1f\xfe\xe3\x5f\x60\x9c\x8e\xf7\x0f\xf8\xc2\xd1\xf1\x18\xde\xc2\x61\x3a\x1e\xef\xc3\x5b\xb8\x7f\x7c\x3f\x3d" +
		"\x1e\xd3\x88\x7b\xd3\xf4\xfe\x11\xdc\x44\x1f\xb6\xd3\x8e\xfa\x8b\x97\x29\x11\xbd\x44\x70\x72\x90\x1e\x1f\x8e\x23" +
		"\xc5\x83\xfb\xf1\xca\xf8\x90\xbe\xdc\x8b\x57\xa6\xe3\xc9\xbd\x74\x7a\x40\x83\x26\xfb\xd3\xf4\xf8\xe0\x02\xd5\xbe" +
		"\xc4\x3f\x95\xf1\x71\x3a\x1e\xdf\x8f\xcb\x18\x8f\xbb\x0b\xfc\x77\x42\xbf\x27\x29\x5d\xbe\x99\xee\x87\x30\x3c\x4e" +
		"\xc7\x81\x15\x22\x30\x89\x17\xa6\xe1\xef\x3e\xfd\xdd\x4f\x5b\x0d\x4c\x0f\xe1\x6d\xcf\x84\x83\xcd\x53\xe2\x0a\xb6" +
		"\x6e\x4d\xf2\xc5\xb2\xa9\xd0\x16\x52\x63\xaf\x3c\xb6\x2e\x6f\xba\xa5\xb0\x67\x79\xb5\xd7\x8d\xe2\xca\x98\x80\xca" +
		"\xe2\x12\xb9\x73\x7f\x87\xdd\x18\xc1\x95\x01\x3c\x11\xd9\xdc\x98\x33\xf8\x95\x35\x30\xd9\x87\x52\xe6\xbb\xd3\xf1" +
		"\xe4\x18\xe4\x7d\x98\xa6\x47\x8f\x1e\xff\x16\x26\x87\x8f\x3e\x87\xe9\xbd\xc3\x47\x9f\xa7\xeb\xae\xb8\x05\xea\xf0" +
		"\x76\x83\xef\x2f\x35\x6c\x65\xf6\xc5\xeb\xe5\xef\x2d\x50\xa7\x6e\x99\xfe\x77\x00\x00\x00\xff\xff\x9a\x5f\x84\xb3" +
		"\xe6\x3f\x00\x00")

func bindataREADMEmdBytes() ([]byte, error) {
	return bindataRead(
		_bindataREADMEmd,
		"../README.md",
	)
}

func bindataREADMEmd() (*asset, error) {
	bytes, err := bindataREADMEmdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "../README.md",
		size:        16358,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1577462489, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"../README.md": bindataREADMEmd,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"..": {Func: nil, Children: map[string]*bintree{
		"README.md": {Func: bindataREADMEmd, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
